-- Copyright 2024 Yunseong Hwang
--
-- Licensed under the GNU Lesser General Public License Version 3.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     https://www.gnu.org/licenses/lgpl-3.0.en.html
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.
--
-- SPDX-License-Identifier: LGPL-3.0-or-later

module Pinescript
{
     mod = Script(stmt* body, string* annotations)
         | Expression(expr body)

     stmt = FunctionDef(identifier name, param* args, stmt* body, int? method, int? export, string* annotations)
          | TypeDef(identifier name, stmt* body, int? export, string* annotations)
          | Assign(expr target, expr? value, expr? type, decl_mode? mode, string* annotations)
          | ReAssign(expr target, expr value)
          | AugAssign(expr target, operator op, expr value)
          | Import(identifier namespace, identifier name, int version, identifier? alias)
          | Expr(expr value)
          | Break
          | Continue

          -- col_offset is the byte offset in the utf8 string the parser uses
          attributes (int lineno, int col_offset, int? end_lineno, int? end_col_offset)

     expr = BoolOp(bool_op op, expr* values)
          | BinOp(expr left, operator op, expr right)
          | UnaryOp(unary_op op, expr operand)
          | Conditional(expr test, expr body, expr orelse)
          | Compare(expr left, compare_op* ops, expr* comparators)
          | Call(expr func, arg* args)
          | Constant(constant value, string? kind)

          -- the following expression can appear in assignment context
          | Attribute(expr value, identifier attr, expr_context ctx)
          | Subscript(expr value, expr? slice, expr_context ctx)
          | Name(identifier id, expr_context ctx)
          | Tuple(expr* elts, expr_context ctx)

          -- the following structure can appear as both statement and expression
          | ForTo(expr target, expr start, expr end, stmt* body, expr? step)
          | ForIn(expr target, expr iter, stmt* body)
          | While(expr test, stmt* body)
          | If(expr test, stmt* body, stmt* orelse)
          | Switch(case* cases, expr? subject)

          -- can appear only in type qualification and template specialization
          | Qualify(type_qual qualifier, expr value)
          | Specialize(expr value, expr args)

          -- col_offset is the byte offset in the utf8 string the parser uses
          attributes (int lineno, int col_offset, int? end_lineno, int? end_col_offset)

     decl_mode = Var | VarIp

     type_qual = Const | Input | Simple | Series

     expr_context = Load | Store

     bool_op = And | Or

     operator = Add | Sub | Mult | Div | Mod

     unary_op = Not | UAdd | USub

     compare_op = Eq | NotEq | Lt | LtE | Gt | GtE

     param = Param(identifier name, expr? default, expr? type)

           -- col_offset is the byte offset in the utf8 string the parser uses
           attributes (int lineno, int col_offset, int? end_lineno, int? end_col_offset)

     arg = Arg(expr value, identifier? name)

         -- col_offset is the byte offset in the utf8 string the parser uses
         attributes (int lineno, int col_offset, int? end_lineno, int? end_col_offset)

     case = Case(stmt* body, expr? pattern)

          -- col_offset is the byte offset in the utf8 string the parser uses
          attributes (int lineno, int col_offset, int? end_lineno, int? end_col_offset)

     cmnt = Comment(string value, string? kind)
          -- col_offset is the byte offset in the utf8 string the parser uses
          attributes (int lineno, int col_offset, int? end_lineno, int? end_col_offset)
}
